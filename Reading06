//Duckett JS book Chapter 3: “Object Literals” (pp.100-105)//
*Creating an object: Literal Notation

    var hotel ={

        name: 'Quay',
        rooms: 40,
        booked: 25,
        gym: true,
        roomTypes: ['twin','double','suite'],
        checkAvailability: function(){
            return this.rooms - this.booked;        <=to access any variable inside the { }, need this.
        }
    }

	


    -property (variable)
    -method (function)
    -property and method format - key1 : value1, key2: value2 
    -method : 'this' is used to indicate that 'this object'; to access any variable inside the {}, need this.
    -Creating an empty object: var hotel = {};
    -Accessing an object and Dot Notation:

        var hotelName = hotel.name;
        var roomsFree = hotel.checkAvailability();

    -Object Literal: put many objects in an array!
    -There is another way to Creating many objects by Constructor Notation (see Reading07).

//Chapter 5: “Document Object Model” (pp.183-242)//
DOM: Document Object Model (How browsers should create a model of an HTML page and how JS can access and update the contents of a web page)
DOM Tree: Document Node
          Element Node
          Attribute Node
          Text Node

Step1. Access the elements:
select an individual element node: getElmentById('one')
                                   querySelector('li.hot') -first matching element
select multiple elements node:     getElementsByClassName('hot')
                                   getElementsByTagName('li') - select all the tag is 'li'
                                   querySelectorAll('li.hot') -select all matching elements

select an element from a nodelist:
                                    var elements = document.getElementsByClassName('hot');
                                    if (elements.length >=1){
                                        var firstItem = elements.item(0);    <=use item() function
                                    }
                            or       
                                    var elements = document.getElementsByClassName('hot');
                                    if (elements.length >=1) {
                                        var fisrtItem = elements[0];      <=use array
                                    }
                                    


traversing between elements nodes: parentNode - select the parent of the current element node
                                   previousSibling/nextSibling
                                   firstChild/lastChild -select the first or last child of the current element

page 200
          